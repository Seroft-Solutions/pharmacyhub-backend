name: Initialize PharmacyHub VPS Infrastructure

# Force the use of bash shell for all run steps
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to initialize'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      force_recreate:
        description: 'Force recreate networks and directories'
        required: false
        type: boolean
        default: false
      setup_infrastructure:
        description: 'Setup Nginx Proxy Manager and Portainer'
        required: false
        type: boolean
        default: true

env:
  VPS_HOST: '103.135.45.44'
  VPS_USER: 'root'
  VPS_PORT: '22'
  CI: 'true'

jobs:
  initialize-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased timeout for full setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Disable host key checking
          echo "Host ${{ env.VPS_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} 'echo "SSH connection successful"'

      - name: Setup VPS directories
        run: |
          echo "Setting up directory structure on VPS..."
          
          # Copy setup script
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/scripts/setup-vps-directories.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/
          
          # Make script executable and run it
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "chmod +x /tmp/setup-vps-directories.sh && cd /tmp && ./setup-vps-directories.sh"
          
          echo "VPS directory structure created successfully!"

      - name: Setup Docker networks
        run: |
          echo "Setting up Docker networks on VPS..."
          
          # Create network setup script
          cat > ./setup-networks.sh << 'EOF'
          #!/bin/bash
          # Create Docker networks for PharmacyHub environments
          
          # Create the shared proxy network if it doesn't exist
          if ! docker network inspect proxy-network >/dev/null 2>&1; then
            echo "Creating proxy-network..."
            docker network create proxy-network
          else
            echo "proxy-network already exists."
          fi
          
          # Create environment-specific networks
          for ENV in "dev" "qa" "prod"; do
            NETWORK_NAME="pharmacyhub-${ENV}-network"
            
            if ! docker network inspect $NETWORK_NAME >/dev/null 2>&1; then
              echo "Creating $NETWORK_NAME..."
              docker network create $NETWORK_NAME
            else
              echo "$NETWORK_NAME already exists."
            fi
          done
          
          echo "Docker network setup completed successfully!"
          EOF
          
          # Make script executable
          chmod +x ./setup-networks.sh
          
          # Copy script to server and execute
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./setup-networks.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "chmod +x /tmp/setup-networks.sh && /tmp/setup-networks.sh"
          
          echo "Docker networks created successfully!"

      - name: Deploy proxy infrastructure
        if: ${{ inputs.setup_infrastructure }}
        run: |
          echo "Deploying Nginx Proxy Manager and Portainer..."
          
          # Create infrastructure directory
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy"
          
          # Copy files to server
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/docker-compose.yml ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/setup.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/manage.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/configure-firewall.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/README.md ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          
          # Make scripts executable
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "chmod +x /opt/PharmacyHub/infrastructure/proxy/*.sh"
          
          # Configure firewall
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/infrastructure/proxy && ./configure-firewall.sh"
          
          # Run setup script
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/infrastructure/proxy && ./setup.sh"
          
          echo "Infrastructure deployment completed!"

      - name: Verify setup
        if: ${{ inputs.setup_infrastructure }}
        run: |
          # Wait a moment for services to initialize
          echo "Waiting 30 seconds for services to initialize..."
          sleep 30
          
          # Check container status
          echo "Checking container status..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/infrastructure/proxy && docker-compose ps"
          
          # Provide access information
          echo ""
          echo "Access details:"
          echo "- Nginx Proxy Manager: http://${{ env.VPS_HOST }}:81"
          echo "  Default login: admin@example.com / changeme"
          echo "- Portainer: http://${{ env.VPS_HOST }}:9000"
          echo ""
          echo "Deployment complete!"
