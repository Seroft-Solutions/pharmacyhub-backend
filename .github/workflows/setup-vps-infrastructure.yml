name: Initialize PharmacyHub VPS Infrastructure

# Force the use of bash shell for all run steps
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to initialize'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      force_recreate:
        description: 'Force recreate networks and directories'
        required: false
        type: boolean
        default: false
      fix_proxy_manager:
        description: 'Fix Nginx Proxy Manager deployment'
        required: false
        type: boolean
        default: true

env:
  VPS_HOST: '103.135.45.76'
  VPS_USER: 'root'
  VPS_PORT: '22'
  CI: 'true'
  GITHUB_MINUTES_SAVING: 'true'

jobs:
  initialize-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Add timeout to save GitHub minutes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Disable host key checking
          echo "Host ${{ env.VPS_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} 'echo "SSH connection successful"'

      - name: Setup VPS directories
        run: |
          echo "Setting up directory structure on VPS..."
          # Create a working directory
          mkdir -p ./infrastructure_setup
          
          # Copy setup script
          cp deploy/scripts/setup-vps-directories.sh ./infrastructure_setup/
          chmod +x ./infrastructure_setup/setup-vps-directories.sh
          
          # Copy to server and execute
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./infrastructure_setup/setup-vps-directories.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt && chmod +x setup-vps-directories.sh && CI=true ./setup-vps-directories.sh"
          
          echo "VPS directory structure created successfully!"

      - name: Setup Docker networks
        run: |
          echo "Setting up Docker networks on VPS..."
          # Create network setup script
          cat > ./setup-networks.sh << 'EOF'
          #!/bin/bash
          # setup-networks.sh
          # Creates the necessary Docker networks for PharmacyHub environments
          
          # Exit on any error
          set -e
          
          # Environment names
          ENVIRONMENTS=("dev" "qa" "prod")
          
          echo "Setting up Docker networks for PharmacyHub..."
          
          # Create the shared proxy network if it doesn't exist
          if ! docker network inspect proxy-network >/dev/null 2>&1; then
            echo "Creating proxy-network..."
            docker network create proxy-network
          else
            echo "proxy-network already exists."
          fi
          
          # Create environment-specific networks
          for ENV in "${ENVIRONMENTS[@]}"; do
            NETWORK_NAME="pharmacyhub-${ENV}-network"
            
            if ! docker network inspect $NETWORK_NAME >/dev/null 2>&1; then
              echo "Creating $NETWORK_NAME..."
              docker network create $NETWORK_NAME
            else
              echo "$NETWORK_NAME already exists."
            fi
          done
          
          echo "Docker network setup completed successfully!"
          EOF
          
          # Make script executable
          chmod +x ./setup-networks.sh
          
          # Copy script to server and execute
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./setup-networks.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt && chmod +x setup-networks.sh && ./setup-networks.sh"
          
          echo "Docker networks created successfully!"

      - name: Deploy Nginx Proxy Manager and Portainer
        if: ${{ inputs.fix_proxy_manager }}
        run: |
          echo "Deploying Nginx Proxy Manager and Portainer..."
          
          # Create infrastructure directory
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy"
          
          # Copy docker-compose and setup scripts
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/docker-compose.yml ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} deploy/infrastructure/proxy/run-custom-setup.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          
          # Make script executable and run asynchronously to save GitHub minutes
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/infrastructure/proxy && chmod +x run-custom-setup.sh && nohup ./run-custom-setup.sh > setup.log 2>&1 &"
          
          # Wait a few seconds to see if it starts correctly
          sleep 10
          
          # Check if the process is running
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "ps aux | grep run-custom-setup.sh | grep -v grep"
          
          # Show beginning of the log
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "head -20 /opt/PharmacyHub/infrastructure/proxy/setup.log"
          
          echo "Nginx Proxy Manager and Portainer deployment started in background."
          echo "Check /opt/PharmacyHub/infrastructure/proxy/setup.log on the server for progress."

      - name: Provide verification instructions
        run: |
          echo "Infrastructure deployment initiated!"
          echo ""
          echo "To verify completion, SSH to your server and run:"
          echo "  tail -f /opt/PharmacyHub/infrastructure/proxy/setup.log"
          echo ""
          echo "To check container status once deployment completes:"
          echo "  docker ps | grep -E 'nginx-proxy-manager|portainer'"
          echo ""
          echo "Once deployed, you can access:"
          echo "- Nginx Proxy Manager: http://${{ env.VPS_HOST }}:81"
          echo "  Default login: admin@example.com / changeme"
          echo "- Portainer: http://${{ env.VPS_HOST }}:9000"
