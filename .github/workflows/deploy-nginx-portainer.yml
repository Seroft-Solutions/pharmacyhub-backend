name: Deploy PharmacyHub Nginx and Portainer

# Force the use of bash shell for all run steps
defaults:
  run:
    shell: bash

on:
  # Only trigger manually or when changes are made to infrastructure files
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/proxy/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force redeployment even if no changes'
        required: false
        type: boolean
        default: false

env:
  VPS_HOST: '103.135.45.76'
  VPS_USER: 'root'
  VPS_PORT: '22'
  CI: 'true'

jobs:
  deploy-nginx-portainer:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Disable host key checking
          echo "Host ${{ env.VPS_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} 'echo "SSH connection successful"'

      - name: Create shared infrastructure directory on VPS
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy/data"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy/letsencrypt"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy/mysql"
          
          # Set proper permissions
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "chmod -R 755 /opt/PharmacyHub/infrastructure/proxy"
      
      - name: Stop running containers if needed for clean deployment
        run: |
          # Check if containers are already running
          CONTAINERS_RUNNING=$(ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "docker ps | grep -E 'nginx-proxy-manager|portainer' | wc -l")
          
          if [ "$CONTAINERS_RUNNING" -gt "0" ]; then
            echo "Existing containers found. Stopping them for clean deployment..."
            ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/infrastructure/proxy && docker-compose down"
          else
            echo "No existing containers found."
          fi
          
      - name: Backup existing configuration (if any)
        run: |
          # Check if there are existing configurations to back up
          EXISTING_CONFIG=$(ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "[ -d /opt/PharmacyHub/infrastructure/proxy/data ] && echo 'exists' || echo 'not_exists'")
          
          if [ "$EXISTING_CONFIG" == "exists" ]; then
            echo "Creating backup of existing configuration..."
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/backups/$TIMESTAMP && cp -r /opt/PharmacyHub/infrastructure/proxy/data /opt/PharmacyHub/infrastructure/backups/$TIMESTAMP/ && cp -r /opt/PharmacyHub/infrastructure/proxy/letsencrypt /opt/PharmacyHub/infrastructure/backups/$TIMESTAMP/"
            echo "Backup created at /opt/PharmacyHub/infrastructure/backups/$TIMESTAMP"
          else
            echo "No existing configuration to back up."
          fi
      
      - name: Copy Nginx and Portainer files to VPS
        run: |
          # Copy docker-compose file
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./infrastructure/proxy/docker-compose.yml ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/

          # Create data structure for Nginx proxy configurations
          NGINX_CONFIG_DIR=$(ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "[ -d /opt/PharmacyHub/infrastructure/proxy/data/nginx/proxy_host ] && echo 'exists' || echo 'not_exists'")
          
          if [ "$NGINX_CONFIG_DIR" == "not_exists" ]; then
            echo "Creating Nginx proxy directories..."
            ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy/data/nginx/proxy_host"
          fi
          
          # Copy Nginx proxy configurations
          echo "Copying Nginx proxy configurations..."
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./infrastructure/proxy/data/nginx/proxy_host/*.conf ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/data/nginx/proxy_host/
          
          # Copy keys.json if it doesn't exist yet
          KEYS_FILE=$(ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "[ -f /opt/PharmacyHub/infrastructure/proxy/data/keys.json ] && echo 'exists' || echo 'not_exists'")
          
          if [ "$KEYS_FILE" == "not_exists" ]; then
            echo "Copying keys.json..."
            scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./infrastructure/proxy/data/keys.json ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/data/
          else
            echo "keys.json already exists. Preserving existing file."
          fi
          
          # Copy Let's Encrypt renewal configurations
          LETSENCRYPT_DIR=$(ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "[ -d /opt/PharmacyHub/infrastructure/proxy/letsencrypt/renewal ] && echo 'exists' || echo 'not_exists'")
          
          if [ "$LETSENCRYPT_DIR" == "not_exists" ]; then
            echo "Creating Let's Encrypt renewal directory..."
            ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy/letsencrypt/renewal"
          fi
          
          echo "Copying Let's Encrypt renewal configurations..."
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./infrastructure/proxy/letsencrypt/renewal/*.conf ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/letsencrypt/renewal/
          
          # Create ACME challenge directory
          ACME_DIR=$(ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "[ -d /opt/PharmacyHub/infrastructure/proxy/data/letsencrypt-acme-challenge ] && echo 'exists' || echo 'not_exists'")
          
          if [ "$ACME_DIR" == "not_exists" ]; then
            echo "Creating ACME challenge directory..."
            ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "mkdir -p /opt/PharmacyHub/infrastructure/proxy/data/letsencrypt-acme-challenge"
          fi
          
          # Copy docker-cleanup.sh
          echo "Copying docker cleanup script..."
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} ./infrastructure/proxy/docker-cleanup.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/infrastructure/proxy/
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "chmod +x /opt/PharmacyHub/infrastructure/proxy/docker-cleanup.sh"
          
          # Verify files were copied
          echo "Verifying files on remote server:"
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "ls -la /opt/PharmacyHub/infrastructure/proxy/"
          
      - name: Deploy Nginx and Portainer
        run: |
          echo "Starting deployment of Nginx Proxy Manager and Portainer..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/infrastructure/proxy && docker-compose up -d"
          
          # Verify that containers are running
          echo "Verifying container deployment..."
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "docker ps | grep -E 'nginx-proxy-manager|portainer'"
          
          echo "Nginx and Portainer deployment completed successfully!"
          echo "Nginx Proxy Manager is accessible at: http://${{ env.VPS_HOST }}:81 or https://nginx.pharmacyhub.pk"
          echo "Portainer is accessible at: http://${{ env.VPS_HOST }}:9000 or https://portainer.pharmacyhub.pk"
