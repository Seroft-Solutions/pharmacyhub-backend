name: PharmacyHub Complete System Deployment

# Force the use of bash shell for all run steps
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - frontend

env:
  VPS_HOST: '175.111.97.58'
  VPS_USER: 'ubuntu'
  VPS_PORT: '50489'
  CI: 'true'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.component == 'all' || github.event.inputs.component == 'backend'
    
    steps:
      - name: Determine environment
        id: set_env
        run: |
          echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "ENV_FILE=.env.${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          
          # Set different Docker image tags per environment
          if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "BACKEND_DOCKER_IMAGE=syedus06/pharmacyhub-backend:dev" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "qa" ]]; then
            echo "BACKEND_DOCKER_IMAGE=syedus06/pharmacyhub-backend:qa" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "BACKEND_DOCKER_IMAGE=syedus06/pharmacyhub-backend:prod" >> $GITHUB_ENV
          fi
          
          echo "Deploying to ${{ env.DEPLOY_ENV }} environment"
      
      - name: Checkout backend code
        uses: actions/checkout@v4
        with:
          repository: 'syedus06/pharmacyhub-backend'
          ref: 'main'  # This should be dynamic based on environment
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
      
      - name: Build Docker image
        run: docker build -t ${{ env.BACKEND_DOCKER_IMAGE }} .
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker image
        run: docker push ${{ env.BACKEND_DOCKER_IMAGE }}
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "Host ${{ env.VPS_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Ensure Docker networks exist
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            echo 'Ensuring Docker networks exist...'
            docker network inspect pharmacyhub-${{ env.DEPLOY_ENV }}-network >/dev/null 2>&1 || docker network create pharmacyhub-${{ env.DEPLOY_ENV }}-network
            docker network inspect proxy-network >/dev/null 2>&1 || docker network create proxy-network
            echo 'Docker networks verified!'
          "

      - name: Copy deployment files to VPS
        run: |
          # Create a temporary directory structure
          mkdir -p ./deploy_temp
          
          # Copy required files
          cp deploy/docker/docker-compose.${{ env.DEPLOY_ENV }}.yml ./deploy_temp/
          cp deploy/scripts/enhanced-deploy.sh ./deploy_temp/deploy.sh
          cp deploy/scripts/backup-database.sh ./deploy_temp/
          cp deploy/scripts/restore-database.sh ./deploy_temp/
          cp deploy/scripts/cleanup.sh ./deploy_temp/
          
          # Create environment file directly on the server
          cat deploy/env/${{ env.ENV_FILE }} > .env.tmp
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} .env.tmp ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/backend/.env
          
          # Copy files to server
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} -r ./deploy_temp/* ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/backend/
          
          # Make scripts executable
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/backend && chmod +x *.sh"
          
          # Rename docker-compose file
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/backend && mv -v docker-compose.${{ env.DEPLOY_ENV }}.yml docker-compose.yml"
      
      - name: Deploy backend
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/backend && 
            export DOCKER_USERNAME='${{ secrets.DOCKER_USERNAME }}' && 
            export DOCKER_PASSWORD='${{ secrets.DOCKER_PASSWORD }}' && 
            export CI=true && 
            ./deploy.sh ${{ env.DEPLOY_ENV }}
          "
      
      - name: Verify backend health
        id: health_check
        run: |
          if [[ "${{ env.DEPLOY_ENV }}" == "dev" ]]; then
            HEALTH_URL="https://api.dev.pharmacyhub.pk/actuator/health"
          elif [[ "${{ env.DEPLOY_ENV }}" == "qa" ]]; then
            HEALTH_URL="https://api.qa.pharmacyhub.pk/actuator/health"
          elif [[ "${{ env.DEPLOY_ENV }}" == "prod" ]]; then
            HEALTH_URL="https://api.pharmacyhub.pk/actuator/health"
          fi
          
          MAX_ATTEMPTS=10
          COUNTER=0
          
          while [ $COUNTER -lt $MAX_ATTEMPTS ]; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")
            
            if [ "$RESPONSE" == "200" ]; then
              echo "Backend health check succeeded!"
              echo "::set-output name=status::success"
              break
            fi
            
            COUNTER=$((COUNTER + 1))
            if [ $COUNTER -eq $MAX_ATTEMPTS ]; then
              echo "Backend health check failed after $MAX_ATTEMPTS attempts"
              echo "::set-output name=status::failure"
              exit 0
            fi
            
            echo "Attempt $COUNTER/$MAX_ATTEMPTS: Backend not healthy yet (status: $RESPONSE)..."
            sleep 10
          done

  deploy-frontend:
    needs: deploy-backend
    if: github.event.inputs.component == 'all' || github.event.inputs.component == 'frontend'
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine environment
        id: set_env
        run: |
          echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "ENV_FILE=.env.${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          
          # Set different Docker image tags per environment
          if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "FRONTEND_DOCKER_IMAGE=syedus06/pharmacyhub-frontend:dev" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "qa" ]]; then
            echo "FRONTEND_DOCKER_IMAGE=syedus06/pharmacyhub-frontend:qa" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "FRONTEND_DOCKER_IMAGE=syedus06/pharmacyhub-frontend:prod" >> $GITHUB_ENV
          fi
          
          echo "Deploying to ${{ env.DEPLOY_ENV }} environment"
      
      - name: Checkout frontend code
        uses: actions/checkout@v4
        with:
          repository: 'syedus06/pharmacyhub-frontend'
          ref: 'main'  # This should be dynamic based on environment
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, skipping"
      
      - name: Build Next.js application
        run: npm run build
      
      - name: Build Docker image
        run: |
          docker build -t ${{ env.FRONTEND_DOCKER_IMAGE }} \
            --build-arg NODE_ENV=${{ env.DEPLOY_ENV }} \
            --build-arg ENV_FILE=deploy/env/${{ env.ENV_FILE }} \
            --no-cache .
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker image
        run: docker push ${{ env.FRONTEND_DOCKER_IMAGE }}
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "Host ${{ env.VPS_HOST }}" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Ensure Docker networks exist
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            echo 'Ensuring Docker networks exist...'
            docker network inspect pharmacyhub-${{ env.DEPLOY_ENV }}-network >/dev/null 2>&1 || docker network create pharmacyhub-${{ env.DEPLOY_ENV }}-network
            docker network inspect proxy-network >/dev/null 2>&1 || docker network create proxy-network
            echo 'Docker networks verified!'
          "

      - name: Copy deployment files to VPS
        run: |
          # Create a temporary directory structure
          mkdir -p ./deploy_temp
          
          # Copy required files
          cp deploy/docker/docker-compose.${{ env.DEPLOY_ENV }}.yml ./deploy_temp/
          cp deploy/scripts/enhanced-deploy.sh ./deploy_temp/deploy.sh
          
          # Create environment file directly on the server
          cat deploy/env/${{ env.ENV_FILE }} > .env.tmp
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} .env.tmp ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/.env
          
          # Copy files to server
          scp -i ~/.ssh/id_rsa -P ${{ env.VPS_PORT }} -r ./deploy_temp/* ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend/
          
          # Make scripts executable
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && chmod +x *.sh"
          
          # Rename docker-compose file
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && mv -v docker-compose.${{ env.DEPLOY_ENV }}.yml docker-compose.yml"
      
      - name: Deploy frontend
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ env.VPS_PORT }} ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd /opt/PharmacyHub/${{ env.DEPLOY_ENV }}/frontend && 
            export DOCKER_USERNAME='${{ secrets.DOCKER_USERNAME }}' && 
            export DOCKER_PASSWORD='${{ secrets.DOCKER_PASSWORD }}' && 
            export CI=true && 
            ./deploy.sh ${{ env.DEPLOY_ENV }}
          "
      
      - name: Verify frontend health
        run: |
          if [[ "${{ env.DEPLOY_ENV }}" == "dev" ]]; then
            FRONTEND_URL="https://dev.pharmacyhub.pk"
          elif [[ "${{ env.DEPLOY_ENV }}" == "qa" ]]; then
            FRONTEND_URL="https://qa.pharmacyhub.pk"
          elif [[ "${{ env.DEPLOY_ENV }}" == "prod" ]]; then
            FRONTEND_URL="https://www.pharmacyhub.pk"
          fi
          
          MAX_ATTEMPTS=10
          COUNTER=0
          
          while [ $COUNTER -lt $MAX_ATTEMPTS ]; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL || echo "000")
            
            if [ "$RESPONSE" == "200" ]; then
              echo "Frontend health check succeeded!"
              break
            fi
            
            COUNTER=$((COUNTER + 1))
            if [ $COUNTER -eq $MAX_ATTEMPTS ]; then
              echo "Frontend health check failed after $MAX_ATTEMPTS attempts"
              exit 1
            fi
            
            echo "Attempt $COUNTER/$MAX_ATTEMPTS: Frontend not healthy yet (status: $RESPONSE)..."
            sleep 10
          done
          
          echo "PharmacyHub system deployment for ${{ env.DEPLOY_ENV }} environment completed successfully!"
