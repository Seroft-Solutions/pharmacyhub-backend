package com.pharmacyhub.service;

import com.pharmacyhub.dto.UserDTO;
import com.pharmacyhub.dto.request.LoginRequestDTO;
import com.pharmacyhub.dto.request.SocialLoginRequestDTO;
import com.pharmacyhub.dto.response.AuthResponseDTO;
import com.pharmacyhub.dto.response.TokensDTO;
import com.pharmacyhub.dto.response.UserResponseDTO;
import com.pharmacyhub.dto.session.LoginValidationRequestDTO;
import com.pharmacyhub.dto.session.LoginValidationResultDTO;
import com.pharmacyhub.entity.User;
import com.pharmacyhub.security.domain.Permission;
import com.pharmacyhub.security.domain.Role;
import com.pharmacyhub.security.infrastructure.exception.UnverifiedAccountException;
import com.pharmacyhub.security.service.AuthenticationService;
import com.pharmacyhub.service.session.SessionValidationService;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Service for handling authentication-related operations
 */
@Service
public class AuthService {
    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);

    @Autowired
    private AuthenticationService authenticationService;
    
    @Autowired
    private UserService userService;
    
    @Autowired
    private SessionValidationService sessionValidationService;
    
    @Autowired
    private EmailService emailService;
    
    @Autowired
    private TokenService tokenService;

    @Value("${pharmacyhub.security.jwt.token-validity-in-seconds:18000}")
    private long tokenValidityInSeconds;
    
    @Value("${pharmacyhub.frontend.url}")
    private String frontendUrl;
    
    /**
     * Process user login
     * 
     * @param request The login request
     * @param httpRequest The HTTP request for extracting client IP
     * @return Login response with user details and tokens
     * @throws UnverifiedAccountException if the account is not verified
     * @throws Exception if login fails due to invalid credentials
     */
    public AuthResponseDTO login(LoginRequestDTO request, HttpServletRequest httpRequest) throws Exception {
        // Authenticate the user
        User authenticatedUser = authenticationService.authenticateUser(request.getEmailAddress(), request.getPassword());
        
        // Generate JWT token
        String token = authenticationService.generateToken(authenticatedUser);
        
        // Get user roles
        Set<Role> userRoles = authenticatedUser.getRoles();
        List<String> roleNames = userRoles.stream()
                .map(Role::getName)
                .collect(Collectors.toList());
        
        // Get user permissions
        Set<String> permissionNames = new HashSet<>();
        for (Role userRole : userRoles) {
            if (userRole.getPermissions() != null) {
                userRole.getPermissions().stream()
                        .map(Permission::getName)
                        .forEach(permissionNames::add);
            }
        }
        
        // Create user response DTO
        UserResponseDTO userResponse = UserResponseDTO.builder()
                .id(authenticatedUser.getId().toString())
                .email(authenticatedUser.getEmailAddress())
                .firstName(authenticatedUser.getFirstName())
                .lastName(authenticatedUser.getLastName())
                .active(authenticatedUser.isEnabled())
                .createdAt(LocalDateTime.now().toString())
                .updatedAt(LocalDateTime.now().toString())
                .roles(roleNames)
                .build();
        
        // Create tokens DTO
        TokensDTO tokens = TokensDTO.builder()
                .accessToken(token)
                .tokenType("Bearer")
                .expiresIn(tokenValidityInSeconds)
                .build();
        
        // Create response DTO
        AuthResponseDTO response = AuthResponseDTO.builder()
                .user(userResponse)
                .tokens(tokens)
                .build();
        
        // Validate session if device information is provided
        if (request.getDeviceId() != null) {
            // Get client IP from request
            String ipAddress = getClientIpAddress(httpRequest);
            
            // Validate login session
            LoginValidationRequestDTO validationRequest = LoginValidationRequestDTO.builder()
                .userId(authenticatedUser.getId())
                .deviceId(request.getDeviceId())
                .ipAddress(ipAddress)
                .userAgent(request.getUserAgent())
                .platform(request.getPlatform())
                .language(request.getLanguage())
                .metadata(buildMetadataJson(request))
                .build();
            
            LoginValidationResultDTO validationResult = sessionValidationService.validateLogin(validationRequest);
            
            // Add session ID to response if available
            if (validationResult.getSessionId() != null) {
                response = AuthResponseDTO.builder()
                    .user(userResponse)
                    .tokens(tokens)
                    .sessionId(validationResult.getSessionId())
                    .validationStatus(validationResult.getStatus().toString())
                    .build();
                
                // Send login notification email if this is a new device or suspicious login
                if (validationResult.getStatus() == LoginValidationResultDTO.LoginStatus.NEW_DEVICE ||
                    validationResult.getStatus() == LoginValidationResultDTO.LoginStatus.SUSPICIOUS) {
                    try {
                        // Extract device name from user agent if possible
                        String deviceName = extractDeviceInfo(request.getUserAgent());
                        
                        // Send login notification email
                        emailService.sendLoginNotificationEmail(
                            authenticatedUser.getEmailAddress(),
                            ipAddress,
                            request.getUserAgent(),
                            "Unknown location", // In a real implementation, we would use IP geolocation
                            deviceName,
                            LocalDateTime.now()
                        );
                    } catch (Exception e) {
                        // Log error but don't fail the login process
                        logger.error("Failed to send login notification email", e);
                    }
                }
            }
        }
        
        logger.info("Login successful for user: {}", authenticatedUser.getUsername());
        return response;
    }
    
    /**
     * Extract device information from user agent string
     * 
     * @param userAgent User agent string from browser or device
     * @return Simple device description
     */
    private String extractDeviceInfo(String userAgent) {
        if (userAgent == null || userAgent.isEmpty()) {
            return "Unknown device";
        }
        
        // Simple pattern matching to extract common device information
        // For more comprehensive parsing, a dedicated library like UADetector should be used
        
        // Check for mobile devices
        if (userAgent.contains("iPhone")) return "iPhone";
        if (userAgent.contains("iPad")) return "iPad";
        if (userAgent.contains("Android")) {